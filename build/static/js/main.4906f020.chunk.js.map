{"version":3,"sources":["Blog.js","serviceWorker.js","index.js"],"names":["renderer","marked","Renderer","markedImages","Markdown","post","useState","postContents","setPostContents","fetch","filename","then","resp","text","console","log","dangerouslySetInnerHTML","__html","Chart","chart","title","label","src","blogposts","path","charts","Header","to","Boolean","window","location","hostname","match","ReactDOM","render","className","map","key","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAOMA,EAAW,IAAIC,IAAOC,SAE5BC,IAAaH,GAgBN,IAAMI,EAAoC,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EACjBC,mBAAS,MADQ,mBAClDC,EADkD,KACpCC,EADoC,KAUzD,OAPAC,MAAM,mBAAD,OAAoBJ,EAAKK,WACzBC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAE,GACFC,QAAQC,IAAIF,GACZL,EAAgBP,IAAOY,OAIV,OAAjBN,EACE,qCACA,6BAASS,wBAAyB,CAAEC,OAASV,MAI1CW,EAA8B,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACzC,OACI,4BAAQC,MAAOD,EAAME,MAAOC,IAAG,uBAAkBH,EAAMT,aAIzDa,EAAoB,CACtB,CACIb,SAAU,oCACVW,MAAO,uCACPG,KAAM,gBAEV,CACId,SAAU,+BACVW,MAAO,yCACPG,KAAM,mBAIRC,EAAS,CACX,CACIf,SAAU,mBACVW,MAAO,iBACPG,KAAM,sBAIRE,EAAyB,kBAC3B,gCACI,+CACA,kBAAC,IAAD,CAAMC,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,YC7DYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFuEoB,WAChC,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,kBACf,kBAAC,IAAD,KACA,kBAAC,EAAD,MACI,kBAAC,IAAD,CAAOX,KAAM,SAAUU,OAAQ,WAC3B,OACI,gCAEQX,EAAUa,KAAI,SAAC/B,GACX,OACI,kBAAC,IAAD,CAAMgC,IAAKhC,EAAKmB,KAAMG,GAAE,iBAAYtB,EAAKmB,OACpCnB,EAAKgB,cAQlC,kBAAC,IAAD,CAAOG,KAAM,UAAWU,OAAQ,WAC5B,OACI,gCAEQT,EAAOW,KAAI,SAACjB,GACR,OACI,kBAAC,IAAD,CAAMkB,IAAKlB,EAAMK,KAAMG,GAAE,kBAAaR,EAAMK,OACvCL,EAAME,cAQnC,kBAAC,IAAD,CAAOiB,OAAK,EAACd,KAAM,CAAC,IAAK,SAAU,WAAYU,OAAQ,WACnD,OACI,6BACA,2HAII,6BACA,6BALJ,uFAQI,6BACA,6BATJ,mBAWI,6BACA,6BAZJ,wFAoBJX,EAAUa,KAAI,SAAC/B,GACX,OACI,kBAAC,IAAD,CAAOmB,KAAI,iBAAYnB,EAAKmB,MAAQU,OAAQ,kBACxC,kBAAC,EAAD,CAAU7B,KAAMA,UAO5BoB,EAAOW,KAAI,SAACjB,GACR,OACI,kBAAC,IAAD,CAAOK,KAAI,kBAAaL,EAAMK,MAAQU,OAAQ,kBAC1C,kBAAC,EAAD,CAAOf,MAAOA,eE/I9B,MAAUoB,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.4906f020.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport './App.scss';\nimport marked from 'marked';\n\nimport markedImages from 'marked-images';\n\nconst renderer = new marked.Renderer();\n\nmarkedImages(renderer);\n\ninterface RenderableFile {\n    filename: string,\n    label: string,\n    path: string\n}\n\ninterface MarkdownProps {\n    post: RenderableFile\n}\n\ninterface ChartProps {\n    chart: RenderableFile\n}\n\nexport const Markdown: React.FC<MarkdownProps> = ({post}) => {\n    const [postContents, setPostContents] = useState(null);\n\n    fetch(`/markdown_posts/${post.filename}`)\n        .then(resp => resp.text())\n        .then(text => {\n            console.log(text);\n            setPostContents(marked(text))\n        });\n    \n    return(\n        postContents === null\n        ? <></>\n        : <article dangerouslySetInnerHTML={{ __html : postContents }}/>\n    )\n}\n\nexport const Chart: React.FC<ChartProps> = ({chart}) => {\n    return(\n        <iframe title={chart.label} src={`/chart_pages/${chart.filename}`} />\n    )\n}\n\nconst blogposts: Post[] = [\n    {\n        filename: \"2017-01-31-snek-lizard-paradox.md\",\n        label: \"The Snake-Lizard Probability Paradox\",\n        path: \"snake-lizard\"\n    },\n    {\n        filename: \"2016-08-24-sampling-monad.md\",\n        label: \"Sampling Monad (reinventing the wheel)\",\n        path: \"sampling-monad\"\n    }\n];\n\nconst charts = [\n    {\n        filename: \"yield-curve.html\",\n        label: \"3D Yield Curve\",\n        path: \"yield-curve-chart\"\n    }\n]\n\nconst Header: React.FC<void> = () => (\n    <header>\n        <h1>Blog - Kevin Li</h1>\n        <Link to=\"/posts\">Posts</Link>\n        <Link to=\"/charts\">Charts</Link>\n    </header>\n)\n\nexport const Blog: React.FC<void> = () => {\n    return(\n        <div className=\"container\">\n            <div className=\"container-item\">\n            <BrowserRouter>\n            <Header />\n                <Route path={\"/posts\"} render={() => {\n                    return(\n                        <header>\n                            {\n                                blogposts.map((post) => {\n                                    return(\n                                        <Link key={post.path} to={`/posts/${post.path}`}>\n                                            {post.label}\n                                        </Link>\n                                    )\n                                })\n                            }\n                        </header>\n                    )\n                }}/>\n                <Route path={\"/charts\"} render={() => {\n                    return(\n                        <header>\n                            {\n                                charts.map((chart) => {\n                                    return(\n                                        <Link key={chart.path} to={`/charts/${chart.path}`}>\n                                            {chart.label}\n                                        </Link>\n                                    )\n                                })\n                            }\n                        </header>\n                    )\n                }}/>\n                <Route exact path={[\"/\", \"/posts\", \"/charts\"]} render={() => {\n                    return(\n                        <div>\n                        <p>\n                            Hey, welcome to my blog. I\n                            sometimes write stuff here that I\n                            find interesting or educational.\n                            <br/>\n                            <br/>\n                            Broadly, the subjects span economics,\n                            finance, probability & stats, and programming.\n                            <br/>\n                            <br/>\n                            Enjoy your stay!\n                            <br/>\n                            <br/>\n                            You can email me at: zl2606 [at(@)] columbia [dot(.)] edu\n                            if you'd like to chat!\n                        </p>\n                        </div>\n                    )\n                }} />\n                {\n                    blogposts.map((post) => {\n                        return(\n                            <Route path={`/posts/${post.path}`} render={() => \n                                <Markdown post={post} />\n                            } />\n                        )\n                    }\n                    )\n                }\n                {\n                    charts.map((chart) => {\n                        return(\n                            <Route path={`/charts/${chart.path}`} render={() => \n                                <Chart chart={chart} />\n                            } />\n                        )\n                    }\n                    )\n                }\n            </BrowserRouter>\n            </div>\n        </div>\n    )\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Blog } from './Blog';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Blog />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}